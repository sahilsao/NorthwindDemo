@page "/customer/orders"

@using NorthwindDemo.Components.Layout.Customer;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@using NorthwindDemo.Context;
@using NorthwindDemo.Entities;
@using NorthwindDemo.Sessions;

@inject CustomerSessions CustomerSessions

@layout CustomerLayout

@inject NavigationManager NavigationManager

@inject IDbContextFactory<DbContextNorthwind> DbContextFactory


<PageTitle>Customer Orders</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Customer Orders</MudText>

@if (_Orders == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="@_Orders" SortMode="SortMode.Single">
        <Columns>
            <TemplateColumn Title="Order ID" Sortable="true" SortBy="@(x => x.OrderId)">
                <CellTemplate>
                    <MudLink Href="@($"/customer/orders-details/{context.Item.OrderId}")">@context.Item.OrderId</MudLink>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.EmployeeId" Title="Employee ID" />
        </Columns>
        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
}


@code {


    private List<Order>? _Orders;
    private bool _hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasLoaded)
        {
            _Orders = await GetOrdersAsync();
            _hasLoaded = true;
            StateHasChanged(); // Trigger UI re-render
        }
    }

    private async Task<List<Order>> GetOrdersAsync()
    {
        String CustomerID = await CustomerSessions.GetCustomerID();

        if (CustomerID == null)
        {
            NavigationManager.NavigateTo("/customer/login");
        }

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        return await dbContext.Orders
        .Where(o => o.CustomerId == CustomerID)
        .Select(c => new Order
        {
            OrderId = c.OrderId,
            EmployeeId = c.EmployeeId
        })
        .ToListAsync();
    }

}
