@page "/customer/customer-orders"

@using NorthwindDemo.Components.Layout.Customer;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@using NorthwindDemo.Context;
@using NorthwindDemo.Entities;
@using NorthwindDemo.Sessions;

@inject CustomerSessions CustomerSessions

@layout CustomerLayout

@inject NavigationManager NavigationManager
@inject DbContextNorthwind DbContext

<PageTitle>Customer Orders</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Customer Orders</MudText>

@if (Orders == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="Orders" Hover="true">
        <HeaderContent>
            <MudTh>Order ID</MudTh>
            <MudTh>Employee ID</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Order ID">@context.OrderId</MudTd>
            <MudTd DataLabel="Employee ID">@context.EmployeeId</MudTd>
        </RowTemplate>
    </MudTable>
}


@code {

    private List<Order>? Orders;
    private bool _hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasLoaded)
        {
            Orders = await GetOrdersAsync();
            _hasLoaded = true;
            StateHasChanged(); // Trigger UI re-render
        }
    }

    private async Task<List<Order>> GetOrdersAsync()
    {
        String CustomerID = await CustomerSessions.GetCustomerID();        

        if (CustomerID == null)
        {
            NavigationManager.NavigateTo("/customer/customer-login");
        }

        return await DbContext.Orders
        .Where(o => o.CustomerId == CustomerID)
        .Select(c => new Order
        {
            OrderId = c.OrderId,
            EmployeeId = c.EmployeeId
        })
        .ToListAsync();
    }
}
