@page "/treasuryupdate"
@rendermode InteractiveServer

@using EFCore.BulkExtensions
@using Microsoft.EntityFrameworkCore
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime JS

@using NorthwindDemo.Context;
@using NorthwindDemo.Entities;
@using System.IO
@using System.Text.Json

@inject IDbContextFactory<TestContext> DbContextFactory

<PageTitle>Treasury Update</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Treasury Update</MudText>

<MudButton Variant="Variant.Text" OnClick="@GetDetailsAsync" Color="Color.Primary"> Get Details</MudButton>
<br /><br />
<MudButton Variant="Variant.Text" OnClick="@CheckEmpcodeStatuses" Color="Color.Warning"> Check Success / Unsuccess Codes
</MudButton>

<br /><br />
<MudButton Variant="Variant.Text" OnClick="@UpdateTxtFiles" Color="Color.Dark"> Update Success / Unsuccess Text Files
</MudButton>
<br /><br />
<MudButton Variant="Variant.Text" OnClick="@UpdateDBSuccessfull" Color="Color.Success"> Update Success / Unsuccess Codes
</MudButton>


@if (NewEmployeeEntries == null)
{
    //<MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="NewEmployeeEntries" Hover="true" Elevation="0">
        <HeaderContent>
            <MudTh>Empcode</MudTh>
            <MudTh>Empname</MudTh>
            <MudTh>WorkingStatus</MudTh>
            <MudTh>PostType</MudTh>
            <MudTh>IsTresuryVerify</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Empcode">@context.Empcode</MudTd>
            <MudTd DataLabel="Empname">@context.Empname</MudTd>
            <MudTd DataLabel="WorkingStatus">@context.WorkingStatus</MudTd>
            <MudTd DataLabel="Post Type">@context.PostType</MudTd>
            <MudTd DataLabel="Is Tresury Verify">@context.IsTresuryVerify</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    public List<NewEmployeeEntry>? NewEmployeeEntries { get; set; }
    private async Task GetDetailsAsync()
    {
        await Task.Delay(500);

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        NewEmployeeEntries = await dbContext.NewEmployeeEntries
        .Where(c => c.WorkingStatus == "Working" && c.PostType == 1 && c.IsTresuryVerify == null)
        .Select(c => new NewEmployeeEntry
        {
            Empcode = c.Empcode.Replace(" ", "").Trim(),
            Empname = c.Empname,
            WorkingStatus = c.WorkingStatus,
            PostType = c.PostType,
            IsTresuryVerify = c.IsTresuryVerify,
        })
        .Take(50)
        .ToListAsync();

        await Task.CompletedTask;
        Snackbar.Add(message: NewEmployeeEntries.Count + " Data Loaded Successfully", severity: Severity.Success);

    }
    private string baseUrl = "https://ekoshonline.cg.gov.in/newapi/api/EmpDetail/byempcode/";

    private List<string> SuccessfulEmpcodes = new();
    private List<string> UnSuccessfulEmpcodes = new();

    private async Task CheckEmpcodeStatuses()
    {
        SuccessfulEmpcodes.Clear();
        UnSuccessfulEmpcodes.Clear();

        foreach (var entry in NewEmployeeEntries!)
        {

            var fullUrl = $"{baseUrl}{entry.Empcode}";

            using var request = new HttpRequestMessage(HttpMethod.Get, fullUrl);
            request.Headers.Add("UserId", "ekosh"); // <-- your actual header key/value
            request.Headers.Add("Password", "ekosh@321"); // <-- your actual header key/value

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();

                if (content.Length < 200 && content.Contains("\"Error Code:01\"", StringComparison.OrdinalIgnoreCase))
                {
                    UnSuccessfulEmpcodes.Add(entry.Empcode);
                }
                else
                {
                    SuccessfulEmpcodes.Add(entry.Empcode);
                }
            }
        }


        StateHasChanged();
        Snackbar.Add(message: SuccessfulEmpcodes.Count + " Success Data ", severity: Severity.Success);

        Snackbar.Add(message: UnSuccessfulEmpcodes.Count + "UnSuccess Data ", severity: Severity.Error);
        await Task.CompletedTask;

    }

    private async Task UpdateDBSuccessfull()
    {

        var filePath = Path.Combine("wwwroot", "success-codes-New.txt");
        var successCodes = await File.ReadAllLinesAsync(filePath);

        var filePath2 = Path.Combine("wwwroot", "unsuccess-codes-New.txt");
        var unsuccessCodes = await File.ReadAllLinesAsync(filePath2);

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        const int batchSize = 500;

        foreach (var batch in successCodes.Chunk(batchSize)) // .NET 6+ required
        {
            var inClause = string.Join(",", batch.Select(c => "'" + c.Replace("'", "''") + "'"));

            var sql = $@"
UPDATE NewEmployeeEntry
SET IsTresuryVerify = 'Y'
WHERE Empcode IN ({inClause}) AND WorkingStatus = 'Working' AND PostType = 1";


            await dbContext.Database.ExecuteSqlRawAsync(sql);

        }


        foreach (var batch in unsuccessCodes.Chunk(batchSize)) // .NET 6+ required
        {
            var inClause = string.Join(",", batch.Select(c => "'" + c.Replace("'", "''") + "'"));

            var sql = $@"
UPDATE NewEmployeeEntry
SET IsTresuryVerify = 'N'
WHERE Empcode IN ({inClause}) AND WorkingStatus = 'Working' AND PostType = 1";


            await dbContext.Database.ExecuteSqlRawAsync(sql);

        }
        await Task.CompletedTask;
        Snackbar.Add(message: SuccessfulEmpcodes.Count + " Success Data Updated Successfully", severity: Severity.Success);

        Snackbar.Add(message: UnSuccessfulEmpcodes.Count + "UnSuccess Data Updated Successfully", severity: Severity.Error);

    }

    private bool _isInitialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // JSRuntime is safe to use
        {
            _isInitialized = true;
            await JS.InvokeVoidAsync("console.log", "Interop safe!");
        }

        await Task.CompletedTask;
    }

    private bool _disposed;

    public ValueTask DisposeAsync()
    {
        _disposed = true;

        return ValueTask.CompletedTask;
    }

    private async Task UpdateTxtFiles()
    {
        

        await Task.Run(() =>
        { if (_disposed) return;

            var filePath = Path.Combine("wwwroot", "success-codes-New.txt");
            File.WriteAllText(filePath, string.Empty);
            File.WriteAllLines(filePath, SuccessfulEmpcodes);

            var filePath2 = Path.Combine("wwwroot", "unsuccess-codes-New.txt");
            File.WriteAllText(filePath2, string.Empty);
            File.WriteAllLines(filePath2, UnSuccessfulEmpcodes);
        });
    }
    


}
